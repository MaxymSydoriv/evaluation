plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.bmuschko.docker-remote-api' version '7.4.0'
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
    }
}

dependencies {
    implementation(project(path: ':nfl-model'))
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'


    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

task createDockerfile(type: Dockerfile) {
    destFile.set(file("$projectDir/build/Dockerfile"))
    from('openjdk:17-jdk-slim')
    copyFile("/libs/${jar.getArchiveBaseName().get()}-${jar.archiveVersion.get()}.jar", "/app/${jar.getArchiveBaseName().get()}-${jar.archiveVersion.get()}.jar")
    entryPoint('java')
    defaultCommand('-jar', "/app/${jar.getArchiveBaseName().get()}-${jar.archiveVersion.get()}.jar")
    exposePort(8080)
}


task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = file("/$projectDir/build")
    images.add("${dockerUsername}/${project.getName()}:latest")
}
